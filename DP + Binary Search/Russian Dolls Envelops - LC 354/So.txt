# smaller envelope can fit into bigger need to find maxi num of envelope fit into one another

# same as longest increasing subsequence 

# at last it gives TLE so have to solve it using binary search

class Solution {
public:
    bool check(vector<int> &curr,vector<int> &prev){
        if(prev[0]<curr[0] && prev[1]<curr[1]){
            return true;
        }

        return false;
    }
    int helperSO(vector<vector<int>>& nums){
        int n= nums.size();
        vector<int> curr(n+1,0);
        vector<int> next(n+1,0);
        for(int i=n-1;i>=0;i--){
            for(int j=i-1;j>=-1;j--){
                int include = 0;
                if(j==-1 || check(nums[i], nums[j])){
                    include = 1 + next[i+1];
                }
                int exclude = 0 + next[j+1];

                curr[j+1] = max(include,exclude);
            }
            next = curr;
        }

        return next[0];
    }
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(),envelopes.end());

        int ans = helperSO(envelopes);

        return ans;
    }
};