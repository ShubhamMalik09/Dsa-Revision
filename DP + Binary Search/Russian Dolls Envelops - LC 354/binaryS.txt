# same as longest increasing subsequence binarySearch

class Solution {
public:
    static bool cmp(vector<int> &a, vector<int> &b){
        if(a[0]==b[0]){
            return a[1]>b[1];
        }

        return a[0]<b[0];
    }
    int helperBinarySearch(vector<vector<int>>& nums){
        sort(nums.begin(),nums.end(), cmp);

        vector<int> ans;
        ans.push_back(nums[0][1]);
        for(int i=1;i<nums.size();i++){
            int ele = nums[i][1];
            if(ele > ans.back()){
                ans.push_back(ele);
            } else{
                int idx = lower_bound(ans.begin(),ans.end(), ele) - ans.begin();
                ans[idx] = ele;
            }
        }

        return ans.size();

    }
    int maxEnvelopes(vector<vector<int>>& envelopes) {
        int ans = helperBinarySearch(envelopes);
        return ans;
    }
};