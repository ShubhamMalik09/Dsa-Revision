class Solution {
public:
    int helper(vector<int>& days, vector<int>& costs, int i,int lastDay, vector<int>& dp){
        if(i>=days.size()) return 0;
        if(lastDay >= days[i]){
            return helper(days, costs, i+1,lastDay, dp);
        }

        if(dp[i] !=-1){
            return dp[i];
        }
        int cost1day = costs[0] + helper(days,costs,i+1,days[i],dp);
        int cost7days = costs[1] + helper(days, costs, i+1, days[i] + 6,dp);
        int cost30days = costs[2] + helper(days,costs,i+1,days[i]+29,dp);

        dp[i] = min(cost1day, min(cost7days,cost30days));

        return dp[i];

    }
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        vector<int> dp(days.size(),-1);
        return helper(days,costs,0,0,dp);
    }
};