class Solution {
public:
    int helper(vector<int>& nums){
        int n=nums.size();
        vector<int>dp(n,0);
        vector<int>dp2(n,0);
        dp[n-2] = nums[n-2];
        dp2[n-1] = nums[n-1];

        for(int i=n-3;i>=0;i--){
            int ans = 0;
            if(i+2<n-1){
                ans = dp[i+2];
            }
            int pick =  nums[i] + ans;
            int unpick = dp[i+1];
            dp[i] = max(pick,unpick);
        }

        for(int i=n-2;i>=1;i--){
            int ans = 0;
            if(i+2<n){
                ans = dp2[i+2];
            }
            int pick =  nums[i] + ans;
            int unpick = dp2[i+1];
            dp2[i] = max(pick,unpick);
        }

        return max(dp[0], dp2[1]);
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
        int ans = helper(nums);

        return ans;
    }
};