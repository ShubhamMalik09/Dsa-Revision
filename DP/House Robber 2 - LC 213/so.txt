#same as house robber but the houses are connected in circle
# first house will be the neighbour of last house

class Solution {
public:
    int helper(vector<int>& nums){
        int n=nums.size();
        int last2 = nums[n-2];
        int last = 0;

        int last21 = nums[n-1];

        for(int i=n-3;i>=0;i--){
            int pick =  nums[i] + last;
            int unpick = last2;
            last = last2;
            last2 = max(pick,unpick);
        }

        last =0;

        for(int i=n-2;i>=1;i--){
            int pick =  nums[i] + last;
            int unpick = last21;
            last = last21;
            last21 = max(pick,unpick);
        }

        return max(last2, last21);
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
        int ans = helper(nums);

        return ans;
    }
};