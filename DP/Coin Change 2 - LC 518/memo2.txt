# first try to make all combination from i denomination if not then switch to next denomination
# pick non pick approach
# 2d dp

class Solution {
public:
    int helper(vector<int>& coins, int amount,int idx, vector<vector<int>> &dp){
        if(idx>=coins.size()) return 0;
        if(amount == 0){
            return 1;
        }

        if(dp[amount][idx]!=-1){
            return dp[amount][idx];
        }

        int pick =0;
        if(amount - coins[idx]>=0){
            pick = helper(coins,amount-coins[idx],idx,dp);
        }

        int unpick = helper(coins,amount,idx+1,dp);
        dp[amount][idx] =  pick + unpick;

        return dp[amount][idx];
    }
    int change(int amount, vector<int>& coins) {
        vector<vector<int>> dp(amount+1, vector<int> (coins.size(),-1));
        return helper(coins,amount,0,dp);   
    }
};